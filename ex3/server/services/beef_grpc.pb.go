// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: beef.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BeefSerivce_GetBeef_FullMethodName = "/services.BeefSerivce/GetBeef"
)

// BeefSerivceClient is the client API for BeefSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeefSerivceClient interface {
	GetBeef(ctx context.Context, in *BeefRequest, opts ...grpc.CallOption) (*BeefResponse, error)
}

type beefSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeefSerivceClient(cc grpc.ClientConnInterface) BeefSerivceClient {
	return &beefSerivceClient{cc}
}

func (c *beefSerivceClient) GetBeef(ctx context.Context, in *BeefRequest, opts ...grpc.CallOption) (*BeefResponse, error) {
	out := new(BeefResponse)
	err := c.cc.Invoke(ctx, BeefSerivce_GetBeef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeefSerivceServer is the server API for BeefSerivce service.
// All implementations must embed UnimplementedBeefSerivceServer
// for forward compatibility
type BeefSerivceServer interface {
	GetBeef(context.Context, *BeefRequest) (*BeefResponse, error)
	mustEmbedUnimplementedBeefSerivceServer()
}

// UnimplementedBeefSerivceServer must be embedded to have forward compatible implementations.
type UnimplementedBeefSerivceServer struct {
}

func (UnimplementedBeefSerivceServer) GetBeef(context.Context, *BeefRequest) (*BeefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeef not implemented")
}
func (UnimplementedBeefSerivceServer) mustEmbedUnimplementedBeefSerivceServer() {}

// UnsafeBeefSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeefSerivceServer will
// result in compilation errors.
type UnsafeBeefSerivceServer interface {
	mustEmbedUnimplementedBeefSerivceServer()
}

func RegisterBeefSerivceServer(s grpc.ServiceRegistrar, srv BeefSerivceServer) {
	s.RegisterService(&BeefSerivce_ServiceDesc, srv)
}

func _BeefSerivce_GetBeef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeefSerivceServer).GetBeef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeefSerivce_GetBeef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeefSerivceServer).GetBeef(ctx, req.(*BeefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeefSerivce_ServiceDesc is the grpc.ServiceDesc for BeefSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeefSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.BeefSerivce",
	HandlerType: (*BeefSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBeef",
			Handler:    _BeefSerivce_GetBeef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beef.proto",
}
